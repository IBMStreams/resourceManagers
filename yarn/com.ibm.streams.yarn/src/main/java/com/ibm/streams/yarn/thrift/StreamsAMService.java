/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ibm.streams.yarn.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StreamsAMService {

  public interface Iface {

    public void stop() throws StreamsException, org.apache.thrift.TException;

    public void lsInstance() throws org.apache.thrift.TException;

    public void startInstance(String instanceID, String instanceOwner, String streamsInstallDir, String baseDir, String instanceOwnerHomeDir) throws StreamsException, org.apache.thrift.TException;

    public void stopInstance(String instanceID) throws StreamsException, org.apache.thrift.TException;

    public void addHost(String instanceID, String host) throws StreamsException, org.apache.thrift.TException;

    public void removeHost(String instanceID, String host) throws StreamsException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void stop(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stop_call> resultHandler) throws org.apache.thrift.TException;

    public void lsInstance(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.lsInstance_call> resultHandler) throws org.apache.thrift.TException;

    public void startInstance(String instanceID, String instanceOwner, String streamsInstallDir, String baseDir, String instanceOwnerHomeDir, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startInstance_call> resultHandler) throws org.apache.thrift.TException;

    public void stopInstance(String instanceID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopInstance_call> resultHandler) throws org.apache.thrift.TException;

    public void addHost(String instanceID, String host, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addHost_call> resultHandler) throws org.apache.thrift.TException;

    public void removeHost(String instanceID, String host, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeHost_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void stop() throws StreamsException, org.apache.thrift.TException
    {
      send_stop();
      recv_stop();
    }

    public void send_stop() throws org.apache.thrift.TException
    {
      stop_args args = new stop_args();
      sendBase("stop", args);
    }

    public void recv_stop() throws StreamsException, org.apache.thrift.TException
    {
      stop_result result = new stop_result();
      receiveBase(result, "stop");
      if (result.streamsException != null) {
        throw result.streamsException;
      }
      return;
    }

    public void lsInstance() throws org.apache.thrift.TException
    {
      send_lsInstance();
      recv_lsInstance();
    }

    public void send_lsInstance() throws org.apache.thrift.TException
    {
      lsInstance_args args = new lsInstance_args();
      sendBase("lsInstance", args);
    }

    public void recv_lsInstance() throws org.apache.thrift.TException
    {
      lsInstance_result result = new lsInstance_result();
      receiveBase(result, "lsInstance");
      return;
    }

    public void startInstance(String instanceID, String instanceOwner, String streamsInstallDir, String baseDir, String instanceOwnerHomeDir) throws StreamsException, org.apache.thrift.TException
    {
      send_startInstance(instanceID, instanceOwner, streamsInstallDir, baseDir, instanceOwnerHomeDir);
      recv_startInstance();
    }

    public void send_startInstance(String instanceID, String instanceOwner, String streamsInstallDir, String baseDir, String instanceOwnerHomeDir) throws org.apache.thrift.TException
    {
      startInstance_args args = new startInstance_args();
      args.setInstanceID(instanceID);
      args.setInstanceOwner(instanceOwner);
      args.setStreamsInstallDir(streamsInstallDir);
      args.setBaseDir(baseDir);
      args.setInstanceOwnerHomeDir(instanceOwnerHomeDir);
      sendBase("startInstance", args);
    }

    public void recv_startInstance() throws StreamsException, org.apache.thrift.TException
    {
      startInstance_result result = new startInstance_result();
      receiveBase(result, "startInstance");
      if (result.streamsException != null) {
        throw result.streamsException;
      }
      return;
    }

    public void stopInstance(String instanceID) throws StreamsException, org.apache.thrift.TException
    {
      send_stopInstance(instanceID);
      recv_stopInstance();
    }

    public void send_stopInstance(String instanceID) throws org.apache.thrift.TException
    {
      stopInstance_args args = new stopInstance_args();
      args.setInstanceID(instanceID);
      sendBase("stopInstance", args);
    }

    public void recv_stopInstance() throws StreamsException, org.apache.thrift.TException
    {
      stopInstance_result result = new stopInstance_result();
      receiveBase(result, "stopInstance");
      if (result.streamsException != null) {
        throw result.streamsException;
      }
      return;
    }

    public void addHost(String instanceID, String host) throws StreamsException, org.apache.thrift.TException
    {
      send_addHost(instanceID, host);
      recv_addHost();
    }

    public void send_addHost(String instanceID, String host) throws org.apache.thrift.TException
    {
      addHost_args args = new addHost_args();
      args.setInstanceID(instanceID);
      args.setHost(host);
      sendBase("addHost", args);
    }

    public void recv_addHost() throws StreamsException, org.apache.thrift.TException
    {
      addHost_result result = new addHost_result();
      receiveBase(result, "addHost");
      if (result.streamsException != null) {
        throw result.streamsException;
      }
      return;
    }

    public void removeHost(String instanceID, String host) throws StreamsException, org.apache.thrift.TException
    {
      send_removeHost(instanceID, host);
      recv_removeHost();
    }

    public void send_removeHost(String instanceID, String host) throws org.apache.thrift.TException
    {
      removeHost_args args = new removeHost_args();
      args.setInstanceID(instanceID);
      args.setHost(host);
      sendBase("removeHost", args);
    }

    public void recv_removeHost() throws StreamsException, org.apache.thrift.TException
    {
      removeHost_result result = new removeHost_result();
      receiveBase(result, "removeHost");
      if (result.streamsException != null) {
        throw result.streamsException;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void stop(org.apache.thrift.async.AsyncMethodCallback<stop_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stop_call method_call = new stop_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stop_call extends org.apache.thrift.async.TAsyncMethodCall {
      public stop_call(org.apache.thrift.async.AsyncMethodCallback<stop_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stop_args args = new stop_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws StreamsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_stop();
      }
    }

    public void lsInstance(org.apache.thrift.async.AsyncMethodCallback<lsInstance_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lsInstance_call method_call = new lsInstance_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lsInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      public lsInstance_call(org.apache.thrift.async.AsyncMethodCallback<lsInstance_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lsInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lsInstance_args args = new lsInstance_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_lsInstance();
      }
    }

    public void startInstance(String instanceID, String instanceOwner, String streamsInstallDir, String baseDir, String instanceOwnerHomeDir, org.apache.thrift.async.AsyncMethodCallback<startInstance_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startInstance_call method_call = new startInstance_call(instanceID, instanceOwner, streamsInstallDir, baseDir, instanceOwnerHomeDir, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String instanceID;
      private String instanceOwner;
      private String streamsInstallDir;
      private String baseDir;
      private String instanceOwnerHomeDir;
      public startInstance_call(String instanceID, String instanceOwner, String streamsInstallDir, String baseDir, String instanceOwnerHomeDir, org.apache.thrift.async.AsyncMethodCallback<startInstance_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceID = instanceID;
        this.instanceOwner = instanceOwner;
        this.streamsInstallDir = streamsInstallDir;
        this.baseDir = baseDir;
        this.instanceOwnerHomeDir = instanceOwnerHomeDir;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startInstance_args args = new startInstance_args();
        args.setInstanceID(instanceID);
        args.setInstanceOwner(instanceOwner);
        args.setStreamsInstallDir(streamsInstallDir);
        args.setBaseDir(baseDir);
        args.setInstanceOwnerHomeDir(instanceOwnerHomeDir);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws StreamsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_startInstance();
      }
    }

    public void stopInstance(String instanceID, org.apache.thrift.async.AsyncMethodCallback<stopInstance_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopInstance_call method_call = new stopInstance_call(instanceID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopInstance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String instanceID;
      public stopInstance_call(String instanceID, org.apache.thrift.async.AsyncMethodCallback<stopInstance_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceID = instanceID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopInstance_args args = new stopInstance_args();
        args.setInstanceID(instanceID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws StreamsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_stopInstance();
      }
    }

    public void addHost(String instanceID, String host, org.apache.thrift.async.AsyncMethodCallback<addHost_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHost_call method_call = new addHost_call(instanceID, host, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHost_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String instanceID;
      private String host;
      public addHost_call(String instanceID, String host, org.apache.thrift.async.AsyncMethodCallback<addHost_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceID = instanceID;
        this.host = host;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHost_args args = new addHost_args();
        args.setInstanceID(instanceID);
        args.setHost(host);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws StreamsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addHost();
      }
    }

    public void removeHost(String instanceID, String host, org.apache.thrift.async.AsyncMethodCallback<removeHost_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeHost_call method_call = new removeHost_call(instanceID, host, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeHost_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String instanceID;
      private String host;
      public removeHost_call(String instanceID, String host, org.apache.thrift.async.AsyncMethodCallback<removeHost_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.instanceID = instanceID;
        this.host = host;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeHost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeHost_args args = new removeHost_args();
        args.setInstanceID(instanceID);
        args.setHost(host);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws StreamsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeHost();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("stop", new stop());
      processMap.put("lsInstance", new lsInstance());
      processMap.put("startInstance", new startInstance());
      processMap.put("stopInstance", new stopInstance());
      processMap.put("addHost", new addHost());
      processMap.put("removeHost", new removeHost());
      return processMap;
    }

    public static class stop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stop_args> {
      public stop() {
        super("stop");
      }

      public stop_args getEmptyArgsInstance() {
        return new stop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stop_result getResult(I iface, stop_args args) throws org.apache.thrift.TException {
        stop_result result = new stop_result();
        try {
          iface.stop();
        } catch (StreamsException streamsException) {
          result.streamsException = streamsException;
        }
        return result;
      }
    }

    public static class lsInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lsInstance_args> {
      public lsInstance() {
        super("lsInstance");
      }

      public lsInstance_args getEmptyArgsInstance() {
        return new lsInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lsInstance_result getResult(I iface, lsInstance_args args) throws org.apache.thrift.TException {
        lsInstance_result result = new lsInstance_result();
        iface.lsInstance();
        return result;
      }
    }

    public static class startInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startInstance_args> {
      public startInstance() {
        super("startInstance");
      }

      public startInstance_args getEmptyArgsInstance() {
        return new startInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startInstance_result getResult(I iface, startInstance_args args) throws org.apache.thrift.TException {
        startInstance_result result = new startInstance_result();
        try {
          iface.startInstance(args.instanceID, args.instanceOwner, args.streamsInstallDir, args.baseDir, args.instanceOwnerHomeDir);
        } catch (StreamsException streamsException) {
          result.streamsException = streamsException;
        }
        return result;
      }
    }

    public static class stopInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopInstance_args> {
      public stopInstance() {
        super("stopInstance");
      }

      public stopInstance_args getEmptyArgsInstance() {
        return new stopInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stopInstance_result getResult(I iface, stopInstance_args args) throws org.apache.thrift.TException {
        stopInstance_result result = new stopInstance_result();
        try {
          iface.stopInstance(args.instanceID);
        } catch (StreamsException streamsException) {
          result.streamsException = streamsException;
        }
        return result;
      }
    }

    public static class addHost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHost_args> {
      public addHost() {
        super("addHost");
      }

      public addHost_args getEmptyArgsInstance() {
        return new addHost_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHost_result getResult(I iface, addHost_args args) throws org.apache.thrift.TException {
        addHost_result result = new addHost_result();
        try {
          iface.addHost(args.instanceID, args.host);
        } catch (StreamsException streamsException) {
          result.streamsException = streamsException;
        }
        return result;
      }
    }

    public static class removeHost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeHost_args> {
      public removeHost() {
        super("removeHost");
      }

      public removeHost_args getEmptyArgsInstance() {
        return new removeHost_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeHost_result getResult(I iface, removeHost_args args) throws org.apache.thrift.TException {
        removeHost_result result = new removeHost_result();
        try {
          iface.removeHost(args.instanceID, args.host);
        } catch (StreamsException streamsException) {
          result.streamsException = streamsException;
        }
        return result;
      }
    }

  }

  public static class stop_args implements org.apache.thrift.TBase<stop_args, stop_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stop_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stop_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stop_args.class, metaDataMap);
    }

    public stop_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_args(stop_args other) {
    }

    public stop_args deepCopy() {
      return new stop_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_args)
        return this.equals((stop_args)that);
      return false;
    }

    public boolean equals(stop_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stop_args typedOther = (stop_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stop_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stop_argsStandardSchemeFactory implements SchemeFactory {
      public stop_argsStandardScheme getScheme() {
        return new stop_argsStandardScheme();
      }
    }

    private static class stop_argsStandardScheme extends StandardScheme<stop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stop_argsTupleSchemeFactory implements SchemeFactory {
      public stop_argsTupleScheme getScheme() {
        return new stop_argsTupleScheme();
      }
    }

    private static class stop_argsTupleScheme extends TupleScheme<stop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class stop_result implements org.apache.thrift.TBase<stop_result, stop_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stop_result");

    private static final org.apache.thrift.protocol.TField STREAMS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("streamsException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stop_resultTupleSchemeFactory());
    }

    public StreamsException streamsException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAMS_EXCEPTION((short)1, "streamsException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAMS_EXCEPTION
            return STREAMS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAMS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("streamsException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stop_result.class, metaDataMap);
    }

    public stop_result() {
    }

    public stop_result(
      StreamsException streamsException)
    {
      this();
      this.streamsException = streamsException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_result(stop_result other) {
      if (other.isSetStreamsException()) {
        this.streamsException = new StreamsException(other.streamsException);
      }
    }

    public stop_result deepCopy() {
      return new stop_result(this);
    }

    @Override
    public void clear() {
      this.streamsException = null;
    }

    public StreamsException getStreamsException() {
      return this.streamsException;
    }

    public stop_result setStreamsException(StreamsException streamsException) {
      this.streamsException = streamsException;
      return this;
    }

    public void unsetStreamsException() {
      this.streamsException = null;
    }

    /** Returns true if field streamsException is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamsException() {
      return this.streamsException != null;
    }

    public void setStreamsExceptionIsSet(boolean value) {
      if (!value) {
        this.streamsException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAMS_EXCEPTION:
        if (value == null) {
          unsetStreamsException();
        } else {
          setStreamsException((StreamsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAMS_EXCEPTION:
        return getStreamsException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAMS_EXCEPTION:
        return isSetStreamsException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_result)
        return this.equals((stop_result)that);
      return false;
    }

    public boolean equals(stop_result that) {
      if (that == null)
        return false;

      boolean this_present_streamsException = true && this.isSetStreamsException();
      boolean that_present_streamsException = true && that.isSetStreamsException();
      if (this_present_streamsException || that_present_streamsException) {
        if (!(this_present_streamsException && that_present_streamsException))
          return false;
        if (!this.streamsException.equals(that.streamsException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stop_result typedOther = (stop_result)other;

      lastComparison = Boolean.valueOf(isSetStreamsException()).compareTo(typedOther.isSetStreamsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamsException, typedOther.streamsException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stop_result(");
      boolean first = true;

      sb.append("streamsException:");
      if (this.streamsException == null) {
        sb.append("null");
      } else {
        sb.append(this.streamsException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stop_resultStandardSchemeFactory implements SchemeFactory {
      public stop_resultStandardScheme getScheme() {
        return new stop_resultStandardScheme();
      }
    }

    private static class stop_resultStandardScheme extends StandardScheme<stop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAMS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamsException = new StreamsException();
                struct.streamsException.read(iprot);
                struct.setStreamsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamsException != null) {
          oprot.writeFieldBegin(STREAMS_EXCEPTION_FIELD_DESC);
          struct.streamsException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stop_resultTupleSchemeFactory implements SchemeFactory {
      public stop_resultTupleScheme getScheme() {
        return new stop_resultTupleScheme();
      }
    }

    private static class stop_resultTupleScheme extends TupleScheme<stop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamsException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamsException()) {
          struct.streamsException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamsException = new StreamsException();
          struct.streamsException.read(iprot);
          struct.setStreamsExceptionIsSet(true);
        }
      }
    }

  }

  public static class lsInstance_args implements org.apache.thrift.TBase<lsInstance_args, lsInstance_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lsInstance_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lsInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lsInstance_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lsInstance_args.class, metaDataMap);
    }

    public lsInstance_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lsInstance_args(lsInstance_args other) {
    }

    public lsInstance_args deepCopy() {
      return new lsInstance_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lsInstance_args)
        return this.equals((lsInstance_args)that);
      return false;
    }

    public boolean equals(lsInstance_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lsInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lsInstance_args typedOther = (lsInstance_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lsInstance_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lsInstance_argsStandardSchemeFactory implements SchemeFactory {
      public lsInstance_argsStandardScheme getScheme() {
        return new lsInstance_argsStandardScheme();
      }
    }

    private static class lsInstance_argsStandardScheme extends StandardScheme<lsInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lsInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lsInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lsInstance_argsTupleSchemeFactory implements SchemeFactory {
      public lsInstance_argsTupleScheme getScheme() {
        return new lsInstance_argsTupleScheme();
      }
    }

    private static class lsInstance_argsTupleScheme extends TupleScheme<lsInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lsInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lsInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class lsInstance_result implements org.apache.thrift.TBase<lsInstance_result, lsInstance_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lsInstance_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lsInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lsInstance_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lsInstance_result.class, metaDataMap);
    }

    public lsInstance_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lsInstance_result(lsInstance_result other) {
    }

    public lsInstance_result deepCopy() {
      return new lsInstance_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lsInstance_result)
        return this.equals((lsInstance_result)that);
      return false;
    }

    public boolean equals(lsInstance_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lsInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lsInstance_result typedOther = (lsInstance_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lsInstance_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lsInstance_resultStandardSchemeFactory implements SchemeFactory {
      public lsInstance_resultStandardScheme getScheme() {
        return new lsInstance_resultStandardScheme();
      }
    }

    private static class lsInstance_resultStandardScheme extends StandardScheme<lsInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lsInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lsInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lsInstance_resultTupleSchemeFactory implements SchemeFactory {
      public lsInstance_resultTupleScheme getScheme() {
        return new lsInstance_resultTupleScheme();
      }
    }

    private static class lsInstance_resultTupleScheme extends TupleScheme<lsInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lsInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lsInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class startInstance_args implements org.apache.thrift.TBase<startInstance_args, startInstance_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startInstance_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INSTANCE_OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceOwner", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STREAMS_INSTALL_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("streamsInstallDir", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BASE_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("baseDir", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField INSTANCE_OWNER_HOME_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceOwnerHomeDir", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startInstance_argsTupleSchemeFactory());
    }

    public String instanceID; // required
    public String instanceOwner; // required
    public String streamsInstallDir; // required
    public String baseDir; // required
    public String instanceOwnerHomeDir; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceID"),
      INSTANCE_OWNER((short)2, "instanceOwner"),
      STREAMS_INSTALL_DIR((short)3, "streamsInstallDir"),
      BASE_DIR((short)4, "baseDir"),
      INSTANCE_OWNER_HOME_DIR((short)5, "instanceOwnerHomeDir");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // INSTANCE_OWNER
            return INSTANCE_OWNER;
          case 3: // STREAMS_INSTALL_DIR
            return STREAMS_INSTALL_DIR;
          case 4: // BASE_DIR
            return BASE_DIR;
          case 5: // INSTANCE_OWNER_HOME_DIR
            return INSTANCE_OWNER_HOME_DIR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INSTANCE_OWNER, new org.apache.thrift.meta_data.FieldMetaData("instanceOwner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAMS_INSTALL_DIR, new org.apache.thrift.meta_data.FieldMetaData("streamsInstallDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BASE_DIR, new org.apache.thrift.meta_data.FieldMetaData("baseDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INSTANCE_OWNER_HOME_DIR, new org.apache.thrift.meta_data.FieldMetaData("instanceOwnerHomeDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startInstance_args.class, metaDataMap);
    }

    public startInstance_args() {
    }

    public startInstance_args(
      String instanceID,
      String instanceOwner,
      String streamsInstallDir,
      String baseDir,
      String instanceOwnerHomeDir)
    {
      this();
      this.instanceID = instanceID;
      this.instanceOwner = instanceOwner;
      this.streamsInstallDir = streamsInstallDir;
      this.baseDir = baseDir;
      this.instanceOwnerHomeDir = instanceOwnerHomeDir;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startInstance_args(startInstance_args other) {
      if (other.isSetInstanceID()) {
        this.instanceID = other.instanceID;
      }
      if (other.isSetInstanceOwner()) {
        this.instanceOwner = other.instanceOwner;
      }
      if (other.isSetStreamsInstallDir()) {
        this.streamsInstallDir = other.streamsInstallDir;
      }
      if (other.isSetBaseDir()) {
        this.baseDir = other.baseDir;
      }
      if (other.isSetInstanceOwnerHomeDir()) {
        this.instanceOwnerHomeDir = other.instanceOwnerHomeDir;
      }
    }

    public startInstance_args deepCopy() {
      return new startInstance_args(this);
    }

    @Override
    public void clear() {
      this.instanceID = null;
      this.instanceOwner = null;
      this.streamsInstallDir = null;
      this.baseDir = null;
      this.instanceOwnerHomeDir = null;
    }

    public String getInstanceID() {
      return this.instanceID;
    }

    public startInstance_args setInstanceID(String instanceID) {
      this.instanceID = instanceID;
      return this;
    }

    public void unsetInstanceID() {
      this.instanceID = null;
    }

    /** Returns true if field instanceID is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceID() {
      return this.instanceID != null;
    }

    public void setInstanceIDIsSet(boolean value) {
      if (!value) {
        this.instanceID = null;
      }
    }

    public String getInstanceOwner() {
      return this.instanceOwner;
    }

    public startInstance_args setInstanceOwner(String instanceOwner) {
      this.instanceOwner = instanceOwner;
      return this;
    }

    public void unsetInstanceOwner() {
      this.instanceOwner = null;
    }

    /** Returns true if field instanceOwner is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceOwner() {
      return this.instanceOwner != null;
    }

    public void setInstanceOwnerIsSet(boolean value) {
      if (!value) {
        this.instanceOwner = null;
      }
    }

    public String getStreamsInstallDir() {
      return this.streamsInstallDir;
    }

    public startInstance_args setStreamsInstallDir(String streamsInstallDir) {
      this.streamsInstallDir = streamsInstallDir;
      return this;
    }

    public void unsetStreamsInstallDir() {
      this.streamsInstallDir = null;
    }

    /** Returns true if field streamsInstallDir is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamsInstallDir() {
      return this.streamsInstallDir != null;
    }

    public void setStreamsInstallDirIsSet(boolean value) {
      if (!value) {
        this.streamsInstallDir = null;
      }
    }

    public String getBaseDir() {
      return this.baseDir;
    }

    public startInstance_args setBaseDir(String baseDir) {
      this.baseDir = baseDir;
      return this;
    }

    public void unsetBaseDir() {
      this.baseDir = null;
    }

    /** Returns true if field baseDir is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseDir() {
      return this.baseDir != null;
    }

    public void setBaseDirIsSet(boolean value) {
      if (!value) {
        this.baseDir = null;
      }
    }

    public String getInstanceOwnerHomeDir() {
      return this.instanceOwnerHomeDir;
    }

    public startInstance_args setInstanceOwnerHomeDir(String instanceOwnerHomeDir) {
      this.instanceOwnerHomeDir = instanceOwnerHomeDir;
      return this;
    }

    public void unsetInstanceOwnerHomeDir() {
      this.instanceOwnerHomeDir = null;
    }

    /** Returns true if field instanceOwnerHomeDir is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceOwnerHomeDir() {
      return this.instanceOwnerHomeDir != null;
    }

    public void setInstanceOwnerHomeDirIsSet(boolean value) {
      if (!value) {
        this.instanceOwnerHomeDir = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceID();
        } else {
          setInstanceID((String)value);
        }
        break;

      case INSTANCE_OWNER:
        if (value == null) {
          unsetInstanceOwner();
        } else {
          setInstanceOwner((String)value);
        }
        break;

      case STREAMS_INSTALL_DIR:
        if (value == null) {
          unsetStreamsInstallDir();
        } else {
          setStreamsInstallDir((String)value);
        }
        break;

      case BASE_DIR:
        if (value == null) {
          unsetBaseDir();
        } else {
          setBaseDir((String)value);
        }
        break;

      case INSTANCE_OWNER_HOME_DIR:
        if (value == null) {
          unsetInstanceOwnerHomeDir();
        } else {
          setInstanceOwnerHomeDir((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceID();

      case INSTANCE_OWNER:
        return getInstanceOwner();

      case STREAMS_INSTALL_DIR:
        return getStreamsInstallDir();

      case BASE_DIR:
        return getBaseDir();

      case INSTANCE_OWNER_HOME_DIR:
        return getInstanceOwnerHomeDir();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceID();
      case INSTANCE_OWNER:
        return isSetInstanceOwner();
      case STREAMS_INSTALL_DIR:
        return isSetStreamsInstallDir();
      case BASE_DIR:
        return isSetBaseDir();
      case INSTANCE_OWNER_HOME_DIR:
        return isSetInstanceOwnerHomeDir();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startInstance_args)
        return this.equals((startInstance_args)that);
      return false;
    }

    public boolean equals(startInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_instanceID = true && this.isSetInstanceID();
      boolean that_present_instanceID = true && that.isSetInstanceID();
      if (this_present_instanceID || that_present_instanceID) {
        if (!(this_present_instanceID && that_present_instanceID))
          return false;
        if (!this.instanceID.equals(that.instanceID))
          return false;
      }

      boolean this_present_instanceOwner = true && this.isSetInstanceOwner();
      boolean that_present_instanceOwner = true && that.isSetInstanceOwner();
      if (this_present_instanceOwner || that_present_instanceOwner) {
        if (!(this_present_instanceOwner && that_present_instanceOwner))
          return false;
        if (!this.instanceOwner.equals(that.instanceOwner))
          return false;
      }

      boolean this_present_streamsInstallDir = true && this.isSetStreamsInstallDir();
      boolean that_present_streamsInstallDir = true && that.isSetStreamsInstallDir();
      if (this_present_streamsInstallDir || that_present_streamsInstallDir) {
        if (!(this_present_streamsInstallDir && that_present_streamsInstallDir))
          return false;
        if (!this.streamsInstallDir.equals(that.streamsInstallDir))
          return false;
      }

      boolean this_present_baseDir = true && this.isSetBaseDir();
      boolean that_present_baseDir = true && that.isSetBaseDir();
      if (this_present_baseDir || that_present_baseDir) {
        if (!(this_present_baseDir && that_present_baseDir))
          return false;
        if (!this.baseDir.equals(that.baseDir))
          return false;
      }

      boolean this_present_instanceOwnerHomeDir = true && this.isSetInstanceOwnerHomeDir();
      boolean that_present_instanceOwnerHomeDir = true && that.isSetInstanceOwnerHomeDir();
      if (this_present_instanceOwnerHomeDir || that_present_instanceOwnerHomeDir) {
        if (!(this_present_instanceOwnerHomeDir && that_present_instanceOwnerHomeDir))
          return false;
        if (!this.instanceOwnerHomeDir.equals(that.instanceOwnerHomeDir))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startInstance_args typedOther = (startInstance_args)other;

      lastComparison = Boolean.valueOf(isSetInstanceID()).compareTo(typedOther.isSetInstanceID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceID, typedOther.instanceID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInstanceOwner()).compareTo(typedOther.isSetInstanceOwner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceOwner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceOwner, typedOther.instanceOwner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamsInstallDir()).compareTo(typedOther.isSetStreamsInstallDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamsInstallDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamsInstallDir, typedOther.streamsInstallDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBaseDir()).compareTo(typedOther.isSetBaseDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseDir, typedOther.baseDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInstanceOwnerHomeDir()).compareTo(typedOther.isSetInstanceOwnerHomeDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceOwnerHomeDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceOwnerHomeDir, typedOther.instanceOwnerHomeDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startInstance_args(");
      boolean first = true;

      sb.append("instanceID:");
      if (this.instanceID == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("instanceOwner:");
      if (this.instanceOwner == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceOwner);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamsInstallDir:");
      if (this.streamsInstallDir == null) {
        sb.append("null");
      } else {
        sb.append(this.streamsInstallDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("baseDir:");
      if (this.baseDir == null) {
        sb.append("null");
      } else {
        sb.append(this.baseDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("instanceOwnerHomeDir:");
      if (this.instanceOwnerHomeDir == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceOwnerHomeDir);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startInstance_argsStandardSchemeFactory implements SchemeFactory {
      public startInstance_argsStandardScheme getScheme() {
        return new startInstance_argsStandardScheme();
      }
    }

    private static class startInstance_argsStandardScheme extends StandardScheme<startInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceID = iprot.readString();
                struct.setInstanceIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INSTANCE_OWNER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceOwner = iprot.readString();
                struct.setInstanceOwnerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STREAMS_INSTALL_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamsInstallDir = iprot.readString();
                struct.setStreamsInstallDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BASE_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.baseDir = iprot.readString();
                struct.setBaseDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INSTANCE_OWNER_HOME_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceOwnerHomeDir = iprot.readString();
                struct.setInstanceOwnerHomeDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceID != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceID);
          oprot.writeFieldEnd();
        }
        if (struct.instanceOwner != null) {
          oprot.writeFieldBegin(INSTANCE_OWNER_FIELD_DESC);
          oprot.writeString(struct.instanceOwner);
          oprot.writeFieldEnd();
        }
        if (struct.streamsInstallDir != null) {
          oprot.writeFieldBegin(STREAMS_INSTALL_DIR_FIELD_DESC);
          oprot.writeString(struct.streamsInstallDir);
          oprot.writeFieldEnd();
        }
        if (struct.baseDir != null) {
          oprot.writeFieldBegin(BASE_DIR_FIELD_DESC);
          oprot.writeString(struct.baseDir);
          oprot.writeFieldEnd();
        }
        if (struct.instanceOwnerHomeDir != null) {
          oprot.writeFieldBegin(INSTANCE_OWNER_HOME_DIR_FIELD_DESC);
          oprot.writeString(struct.instanceOwnerHomeDir);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startInstance_argsTupleSchemeFactory implements SchemeFactory {
      public startInstance_argsTupleScheme getScheme() {
        return new startInstance_argsTupleScheme();
      }
    }

    private static class startInstance_argsTupleScheme extends TupleScheme<startInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstanceID()) {
          optionals.set(0);
        }
        if (struct.isSetInstanceOwner()) {
          optionals.set(1);
        }
        if (struct.isSetStreamsInstallDir()) {
          optionals.set(2);
        }
        if (struct.isSetBaseDir()) {
          optionals.set(3);
        }
        if (struct.isSetInstanceOwnerHomeDir()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetInstanceID()) {
          oprot.writeString(struct.instanceID);
        }
        if (struct.isSetInstanceOwner()) {
          oprot.writeString(struct.instanceOwner);
        }
        if (struct.isSetStreamsInstallDir()) {
          oprot.writeString(struct.streamsInstallDir);
        }
        if (struct.isSetBaseDir()) {
          oprot.writeString(struct.baseDir);
        }
        if (struct.isSetInstanceOwnerHomeDir()) {
          oprot.writeString(struct.instanceOwnerHomeDir);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.instanceID = iprot.readString();
          struct.setInstanceIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.instanceOwner = iprot.readString();
          struct.setInstanceOwnerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.streamsInstallDir = iprot.readString();
          struct.setStreamsInstallDirIsSet(true);
        }
        if (incoming.get(3)) {
          struct.baseDir = iprot.readString();
          struct.setBaseDirIsSet(true);
        }
        if (incoming.get(4)) {
          struct.instanceOwnerHomeDir = iprot.readString();
          struct.setInstanceOwnerHomeDirIsSet(true);
        }
      }
    }

  }

  public static class startInstance_result implements org.apache.thrift.TBase<startInstance_result, startInstance_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startInstance_result");

    private static final org.apache.thrift.protocol.TField STREAMS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("streamsException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startInstance_resultTupleSchemeFactory());
    }

    public StreamsException streamsException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAMS_EXCEPTION((short)1, "streamsException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAMS_EXCEPTION
            return STREAMS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAMS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("streamsException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startInstance_result.class, metaDataMap);
    }

    public startInstance_result() {
    }

    public startInstance_result(
      StreamsException streamsException)
    {
      this();
      this.streamsException = streamsException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startInstance_result(startInstance_result other) {
      if (other.isSetStreamsException()) {
        this.streamsException = new StreamsException(other.streamsException);
      }
    }

    public startInstance_result deepCopy() {
      return new startInstance_result(this);
    }

    @Override
    public void clear() {
      this.streamsException = null;
    }

    public StreamsException getStreamsException() {
      return this.streamsException;
    }

    public startInstance_result setStreamsException(StreamsException streamsException) {
      this.streamsException = streamsException;
      return this;
    }

    public void unsetStreamsException() {
      this.streamsException = null;
    }

    /** Returns true if field streamsException is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamsException() {
      return this.streamsException != null;
    }

    public void setStreamsExceptionIsSet(boolean value) {
      if (!value) {
        this.streamsException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAMS_EXCEPTION:
        if (value == null) {
          unsetStreamsException();
        } else {
          setStreamsException((StreamsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAMS_EXCEPTION:
        return getStreamsException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAMS_EXCEPTION:
        return isSetStreamsException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startInstance_result)
        return this.equals((startInstance_result)that);
      return false;
    }

    public boolean equals(startInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_streamsException = true && this.isSetStreamsException();
      boolean that_present_streamsException = true && that.isSetStreamsException();
      if (this_present_streamsException || that_present_streamsException) {
        if (!(this_present_streamsException && that_present_streamsException))
          return false;
        if (!this.streamsException.equals(that.streamsException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startInstance_result typedOther = (startInstance_result)other;

      lastComparison = Boolean.valueOf(isSetStreamsException()).compareTo(typedOther.isSetStreamsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamsException, typedOther.streamsException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startInstance_result(");
      boolean first = true;

      sb.append("streamsException:");
      if (this.streamsException == null) {
        sb.append("null");
      } else {
        sb.append(this.streamsException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startInstance_resultStandardSchemeFactory implements SchemeFactory {
      public startInstance_resultStandardScheme getScheme() {
        return new startInstance_resultStandardScheme();
      }
    }

    private static class startInstance_resultStandardScheme extends StandardScheme<startInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAMS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamsException = new StreamsException();
                struct.streamsException.read(iprot);
                struct.setStreamsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamsException != null) {
          oprot.writeFieldBegin(STREAMS_EXCEPTION_FIELD_DESC);
          struct.streamsException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startInstance_resultTupleSchemeFactory implements SchemeFactory {
      public startInstance_resultTupleScheme getScheme() {
        return new startInstance_resultTupleScheme();
      }
    }

    private static class startInstance_resultTupleScheme extends TupleScheme<startInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamsException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamsException()) {
          struct.streamsException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamsException = new StreamsException();
          struct.streamsException.read(iprot);
          struct.setStreamsExceptionIsSet(true);
        }
      }
    }

  }

  public static class stopInstance_args implements org.apache.thrift.TBase<stopInstance_args, stopInstance_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopInstance_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopInstance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopInstance_argsTupleSchemeFactory());
    }

    public String instanceID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopInstance_args.class, metaDataMap);
    }

    public stopInstance_args() {
    }

    public stopInstance_args(
      String instanceID)
    {
      this();
      this.instanceID = instanceID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopInstance_args(stopInstance_args other) {
      if (other.isSetInstanceID()) {
        this.instanceID = other.instanceID;
      }
    }

    public stopInstance_args deepCopy() {
      return new stopInstance_args(this);
    }

    @Override
    public void clear() {
      this.instanceID = null;
    }

    public String getInstanceID() {
      return this.instanceID;
    }

    public stopInstance_args setInstanceID(String instanceID) {
      this.instanceID = instanceID;
      return this;
    }

    public void unsetInstanceID() {
      this.instanceID = null;
    }

    /** Returns true if field instanceID is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceID() {
      return this.instanceID != null;
    }

    public void setInstanceIDIsSet(boolean value) {
      if (!value) {
        this.instanceID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceID();
        } else {
          setInstanceID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopInstance_args)
        return this.equals((stopInstance_args)that);
      return false;
    }

    public boolean equals(stopInstance_args that) {
      if (that == null)
        return false;

      boolean this_present_instanceID = true && this.isSetInstanceID();
      boolean that_present_instanceID = true && that.isSetInstanceID();
      if (this_present_instanceID || that_present_instanceID) {
        if (!(this_present_instanceID && that_present_instanceID))
          return false;
        if (!this.instanceID.equals(that.instanceID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopInstance_args typedOther = (stopInstance_args)other;

      lastComparison = Boolean.valueOf(isSetInstanceID()).compareTo(typedOther.isSetInstanceID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceID, typedOther.instanceID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopInstance_args(");
      boolean first = true;

      sb.append("instanceID:");
      if (this.instanceID == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopInstance_argsStandardSchemeFactory implements SchemeFactory {
      public stopInstance_argsStandardScheme getScheme() {
        return new stopInstance_argsStandardScheme();
      }
    }

    private static class stopInstance_argsStandardScheme extends StandardScheme<stopInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceID = iprot.readString();
                struct.setInstanceIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceID != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopInstance_argsTupleSchemeFactory implements SchemeFactory {
      public stopInstance_argsTupleScheme getScheme() {
        return new stopInstance_argsTupleScheme();
      }
    }

    private static class stopInstance_argsTupleScheme extends TupleScheme<stopInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstanceID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInstanceID()) {
          oprot.writeString(struct.instanceID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopInstance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.instanceID = iprot.readString();
          struct.setInstanceIDIsSet(true);
        }
      }
    }

  }

  public static class stopInstance_result implements org.apache.thrift.TBase<stopInstance_result, stopInstance_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopInstance_result");

    private static final org.apache.thrift.protocol.TField STREAMS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("streamsException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopInstance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopInstance_resultTupleSchemeFactory());
    }

    public StreamsException streamsException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAMS_EXCEPTION((short)1, "streamsException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAMS_EXCEPTION
            return STREAMS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAMS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("streamsException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopInstance_result.class, metaDataMap);
    }

    public stopInstance_result() {
    }

    public stopInstance_result(
      StreamsException streamsException)
    {
      this();
      this.streamsException = streamsException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopInstance_result(stopInstance_result other) {
      if (other.isSetStreamsException()) {
        this.streamsException = new StreamsException(other.streamsException);
      }
    }

    public stopInstance_result deepCopy() {
      return new stopInstance_result(this);
    }

    @Override
    public void clear() {
      this.streamsException = null;
    }

    public StreamsException getStreamsException() {
      return this.streamsException;
    }

    public stopInstance_result setStreamsException(StreamsException streamsException) {
      this.streamsException = streamsException;
      return this;
    }

    public void unsetStreamsException() {
      this.streamsException = null;
    }

    /** Returns true if field streamsException is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamsException() {
      return this.streamsException != null;
    }

    public void setStreamsExceptionIsSet(boolean value) {
      if (!value) {
        this.streamsException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAMS_EXCEPTION:
        if (value == null) {
          unsetStreamsException();
        } else {
          setStreamsException((StreamsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAMS_EXCEPTION:
        return getStreamsException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAMS_EXCEPTION:
        return isSetStreamsException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopInstance_result)
        return this.equals((stopInstance_result)that);
      return false;
    }

    public boolean equals(stopInstance_result that) {
      if (that == null)
        return false;

      boolean this_present_streamsException = true && this.isSetStreamsException();
      boolean that_present_streamsException = true && that.isSetStreamsException();
      if (this_present_streamsException || that_present_streamsException) {
        if (!(this_present_streamsException && that_present_streamsException))
          return false;
        if (!this.streamsException.equals(that.streamsException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopInstance_result typedOther = (stopInstance_result)other;

      lastComparison = Boolean.valueOf(isSetStreamsException()).compareTo(typedOther.isSetStreamsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamsException, typedOther.streamsException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopInstance_result(");
      boolean first = true;

      sb.append("streamsException:");
      if (this.streamsException == null) {
        sb.append("null");
      } else {
        sb.append(this.streamsException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopInstance_resultStandardSchemeFactory implements SchemeFactory {
      public stopInstance_resultStandardScheme getScheme() {
        return new stopInstance_resultStandardScheme();
      }
    }

    private static class stopInstance_resultStandardScheme extends StandardScheme<stopInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAMS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamsException = new StreamsException();
                struct.streamsException.read(iprot);
                struct.setStreamsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamsException != null) {
          oprot.writeFieldBegin(STREAMS_EXCEPTION_FIELD_DESC);
          struct.streamsException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopInstance_resultTupleSchemeFactory implements SchemeFactory {
      public stopInstance_resultTupleScheme getScheme() {
        return new stopInstance_resultTupleScheme();
      }
    }

    private static class stopInstance_resultTupleScheme extends TupleScheme<stopInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamsException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamsException()) {
          struct.streamsException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopInstance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamsException = new StreamsException();
          struct.streamsException.read(iprot);
          struct.setStreamsExceptionIsSet(true);
        }
      }
    }

  }

  public static class addHost_args implements org.apache.thrift.TBase<addHost_args, addHost_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHost_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHost_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHost_argsTupleSchemeFactory());
    }

    public String instanceID; // required
    public String host; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceID"),
      HOST((short)2, "host");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // HOST
            return HOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHost_args.class, metaDataMap);
    }

    public addHost_args() {
    }

    public addHost_args(
      String instanceID,
      String host)
    {
      this();
      this.instanceID = instanceID;
      this.host = host;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHost_args(addHost_args other) {
      if (other.isSetInstanceID()) {
        this.instanceID = other.instanceID;
      }
      if (other.isSetHost()) {
        this.host = other.host;
      }
    }

    public addHost_args deepCopy() {
      return new addHost_args(this);
    }

    @Override
    public void clear() {
      this.instanceID = null;
      this.host = null;
    }

    public String getInstanceID() {
      return this.instanceID;
    }

    public addHost_args setInstanceID(String instanceID) {
      this.instanceID = instanceID;
      return this;
    }

    public void unsetInstanceID() {
      this.instanceID = null;
    }

    /** Returns true if field instanceID is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceID() {
      return this.instanceID != null;
    }

    public void setInstanceIDIsSet(boolean value) {
      if (!value) {
        this.instanceID = null;
      }
    }

    public String getHost() {
      return this.host;
    }

    public addHost_args setHost(String host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceID();
        } else {
          setInstanceID((String)value);
        }
        break;

      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceID();

      case HOST:
        return getHost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceID();
      case HOST:
        return isSetHost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHost_args)
        return this.equals((addHost_args)that);
      return false;
    }

    public boolean equals(addHost_args that) {
      if (that == null)
        return false;

      boolean this_present_instanceID = true && this.isSetInstanceID();
      boolean that_present_instanceID = true && that.isSetInstanceID();
      if (this_present_instanceID || that_present_instanceID) {
        if (!(this_present_instanceID && that_present_instanceID))
          return false;
        if (!this.instanceID.equals(that.instanceID))
          return false;
      }

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addHost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addHost_args typedOther = (addHost_args)other;

      lastComparison = Boolean.valueOf(isSetInstanceID()).compareTo(typedOther.isSetInstanceID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceID, typedOther.instanceID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHost_args(");
      boolean first = true;

      sb.append("instanceID:");
      if (this.instanceID == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHost_argsStandardSchemeFactory implements SchemeFactory {
      public addHost_argsStandardScheme getScheme() {
        return new addHost_argsStandardScheme();
      }
    }

    private static class addHost_argsStandardScheme extends StandardScheme<addHost_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceID = iprot.readString();
                struct.setInstanceIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceID != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceID);
          oprot.writeFieldEnd();
        }
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHost_argsTupleSchemeFactory implements SchemeFactory {
      public addHost_argsTupleScheme getScheme() {
        return new addHost_argsTupleScheme();
      }
    }

    private static class addHost_argsTupleScheme extends TupleScheme<addHost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstanceID()) {
          optionals.set(0);
        }
        if (struct.isSetHost()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceID()) {
          oprot.writeString(struct.instanceID);
        }
        if (struct.isSetHost()) {
          oprot.writeString(struct.host);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceID = iprot.readString();
          struct.setInstanceIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.host = iprot.readString();
          struct.setHostIsSet(true);
        }
      }
    }

  }

  public static class addHost_result implements org.apache.thrift.TBase<addHost_result, addHost_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHost_result");

    private static final org.apache.thrift.protocol.TField STREAMS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("streamsException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHost_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHost_resultTupleSchemeFactory());
    }

    public StreamsException streamsException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAMS_EXCEPTION((short)1, "streamsException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAMS_EXCEPTION
            return STREAMS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAMS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("streamsException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHost_result.class, metaDataMap);
    }

    public addHost_result() {
    }

    public addHost_result(
      StreamsException streamsException)
    {
      this();
      this.streamsException = streamsException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHost_result(addHost_result other) {
      if (other.isSetStreamsException()) {
        this.streamsException = new StreamsException(other.streamsException);
      }
    }

    public addHost_result deepCopy() {
      return new addHost_result(this);
    }

    @Override
    public void clear() {
      this.streamsException = null;
    }

    public StreamsException getStreamsException() {
      return this.streamsException;
    }

    public addHost_result setStreamsException(StreamsException streamsException) {
      this.streamsException = streamsException;
      return this;
    }

    public void unsetStreamsException() {
      this.streamsException = null;
    }

    /** Returns true if field streamsException is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamsException() {
      return this.streamsException != null;
    }

    public void setStreamsExceptionIsSet(boolean value) {
      if (!value) {
        this.streamsException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAMS_EXCEPTION:
        if (value == null) {
          unsetStreamsException();
        } else {
          setStreamsException((StreamsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAMS_EXCEPTION:
        return getStreamsException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAMS_EXCEPTION:
        return isSetStreamsException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHost_result)
        return this.equals((addHost_result)that);
      return false;
    }

    public boolean equals(addHost_result that) {
      if (that == null)
        return false;

      boolean this_present_streamsException = true && this.isSetStreamsException();
      boolean that_present_streamsException = true && that.isSetStreamsException();
      if (this_present_streamsException || that_present_streamsException) {
        if (!(this_present_streamsException && that_present_streamsException))
          return false;
        if (!this.streamsException.equals(that.streamsException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addHost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addHost_result typedOther = (addHost_result)other;

      lastComparison = Boolean.valueOf(isSetStreamsException()).compareTo(typedOther.isSetStreamsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamsException, typedOther.streamsException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHost_result(");
      boolean first = true;

      sb.append("streamsException:");
      if (this.streamsException == null) {
        sb.append("null");
      } else {
        sb.append(this.streamsException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHost_resultStandardSchemeFactory implements SchemeFactory {
      public addHost_resultStandardScheme getScheme() {
        return new addHost_resultStandardScheme();
      }
    }

    private static class addHost_resultStandardScheme extends StandardScheme<addHost_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAMS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamsException = new StreamsException();
                struct.streamsException.read(iprot);
                struct.setStreamsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamsException != null) {
          oprot.writeFieldBegin(STREAMS_EXCEPTION_FIELD_DESC);
          struct.streamsException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHost_resultTupleSchemeFactory implements SchemeFactory {
      public addHost_resultTupleScheme getScheme() {
        return new addHost_resultTupleScheme();
      }
    }

    private static class addHost_resultTupleScheme extends TupleScheme<addHost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamsException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamsException()) {
          struct.streamsException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamsException = new StreamsException();
          struct.streamsException.read(iprot);
          struct.setStreamsExceptionIsSet(true);
        }
      }
    }

  }

  public static class removeHost_args implements org.apache.thrift.TBase<removeHost_args, removeHost_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeHost_args");

    private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeHost_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeHost_argsTupleSchemeFactory());
    }

    public String instanceID; // required
    public String host; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INSTANCE_ID((short)1, "instanceID"),
      HOST((short)2, "host");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INSTANCE_ID
            return INSTANCE_ID;
          case 2: // HOST
            return HOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeHost_args.class, metaDataMap);
    }

    public removeHost_args() {
    }

    public removeHost_args(
      String instanceID,
      String host)
    {
      this();
      this.instanceID = instanceID;
      this.host = host;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeHost_args(removeHost_args other) {
      if (other.isSetInstanceID()) {
        this.instanceID = other.instanceID;
      }
      if (other.isSetHost()) {
        this.host = other.host;
      }
    }

    public removeHost_args deepCopy() {
      return new removeHost_args(this);
    }

    @Override
    public void clear() {
      this.instanceID = null;
      this.host = null;
    }

    public String getInstanceID() {
      return this.instanceID;
    }

    public removeHost_args setInstanceID(String instanceID) {
      this.instanceID = instanceID;
      return this;
    }

    public void unsetInstanceID() {
      this.instanceID = null;
    }

    /** Returns true if field instanceID is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceID() {
      return this.instanceID != null;
    }

    public void setInstanceIDIsSet(boolean value) {
      if (!value) {
        this.instanceID = null;
      }
    }

    public String getHost() {
      return this.host;
    }

    public removeHost_args setHost(String host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INSTANCE_ID:
        if (value == null) {
          unsetInstanceID();
        } else {
          setInstanceID((String)value);
        }
        break;

      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INSTANCE_ID:
        return getInstanceID();

      case HOST:
        return getHost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INSTANCE_ID:
        return isSetInstanceID();
      case HOST:
        return isSetHost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeHost_args)
        return this.equals((removeHost_args)that);
      return false;
    }

    public boolean equals(removeHost_args that) {
      if (that == null)
        return false;

      boolean this_present_instanceID = true && this.isSetInstanceID();
      boolean that_present_instanceID = true && that.isSetInstanceID();
      if (this_present_instanceID || that_present_instanceID) {
        if (!(this_present_instanceID && that_present_instanceID))
          return false;
        if (!this.instanceID.equals(that.instanceID))
          return false;
      }

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeHost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeHost_args typedOther = (removeHost_args)other;

      lastComparison = Boolean.valueOf(isSetInstanceID()).compareTo(typedOther.isSetInstanceID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceID, typedOther.instanceID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeHost_args(");
      boolean first = true;

      sb.append("instanceID:");
      if (this.instanceID == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeHost_argsStandardSchemeFactory implements SchemeFactory {
      public removeHost_argsStandardScheme getScheme() {
        return new removeHost_argsStandardScheme();
      }
    }

    private static class removeHost_argsStandardScheme extends StandardScheme<removeHost_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeHost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceID = iprot.readString();
                struct.setInstanceIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeHost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.instanceID != null) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceID);
          oprot.writeFieldEnd();
        }
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeHost_argsTupleSchemeFactory implements SchemeFactory {
      public removeHost_argsTupleScheme getScheme() {
        return new removeHost_argsTupleScheme();
      }
    }

    private static class removeHost_argsTupleScheme extends TupleScheme<removeHost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInstanceID()) {
          optionals.set(0);
        }
        if (struct.isSetHost()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInstanceID()) {
          oprot.writeString(struct.instanceID);
        }
        if (struct.isSetHost()) {
          oprot.writeString(struct.host);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeHost_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.instanceID = iprot.readString();
          struct.setInstanceIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.host = iprot.readString();
          struct.setHostIsSet(true);
        }
      }
    }

  }

  public static class removeHost_result implements org.apache.thrift.TBase<removeHost_result, removeHost_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeHost_result");

    private static final org.apache.thrift.protocol.TField STREAMS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("streamsException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeHost_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeHost_resultTupleSchemeFactory());
    }

    public StreamsException streamsException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAMS_EXCEPTION((short)1, "streamsException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAMS_EXCEPTION
            return STREAMS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAMS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("streamsException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeHost_result.class, metaDataMap);
    }

    public removeHost_result() {
    }

    public removeHost_result(
      StreamsException streamsException)
    {
      this();
      this.streamsException = streamsException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeHost_result(removeHost_result other) {
      if (other.isSetStreamsException()) {
        this.streamsException = new StreamsException(other.streamsException);
      }
    }

    public removeHost_result deepCopy() {
      return new removeHost_result(this);
    }

    @Override
    public void clear() {
      this.streamsException = null;
    }

    public StreamsException getStreamsException() {
      return this.streamsException;
    }

    public removeHost_result setStreamsException(StreamsException streamsException) {
      this.streamsException = streamsException;
      return this;
    }

    public void unsetStreamsException() {
      this.streamsException = null;
    }

    /** Returns true if field streamsException is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamsException() {
      return this.streamsException != null;
    }

    public void setStreamsExceptionIsSet(boolean value) {
      if (!value) {
        this.streamsException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAMS_EXCEPTION:
        if (value == null) {
          unsetStreamsException();
        } else {
          setStreamsException((StreamsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAMS_EXCEPTION:
        return getStreamsException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAMS_EXCEPTION:
        return isSetStreamsException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeHost_result)
        return this.equals((removeHost_result)that);
      return false;
    }

    public boolean equals(removeHost_result that) {
      if (that == null)
        return false;

      boolean this_present_streamsException = true && this.isSetStreamsException();
      boolean that_present_streamsException = true && that.isSetStreamsException();
      if (this_present_streamsException || that_present_streamsException) {
        if (!(this_present_streamsException && that_present_streamsException))
          return false;
        if (!this.streamsException.equals(that.streamsException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeHost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeHost_result typedOther = (removeHost_result)other;

      lastComparison = Boolean.valueOf(isSetStreamsException()).compareTo(typedOther.isSetStreamsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamsException, typedOther.streamsException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeHost_result(");
      boolean first = true;

      sb.append("streamsException:");
      if (this.streamsException == null) {
        sb.append("null");
      } else {
        sb.append(this.streamsException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeHost_resultStandardSchemeFactory implements SchemeFactory {
      public removeHost_resultStandardScheme getScheme() {
        return new removeHost_resultStandardScheme();
      }
    }

    private static class removeHost_resultStandardScheme extends StandardScheme<removeHost_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeHost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAMS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamsException = new StreamsException();
                struct.streamsException.read(iprot);
                struct.setStreamsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeHost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamsException != null) {
          oprot.writeFieldBegin(STREAMS_EXCEPTION_FIELD_DESC);
          struct.streamsException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeHost_resultTupleSchemeFactory implements SchemeFactory {
      public removeHost_resultTupleScheme getScheme() {
        return new removeHost_resultTupleScheme();
      }
    }

    private static class removeHost_resultTupleScheme extends TupleScheme<removeHost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamsException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamsException()) {
          struct.streamsException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeHost_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamsException = new StreamsException();
          struct.streamsException.read(iprot);
          struct.setStreamsExceptionIsSet(true);
        }
      }
    }

  }

}
